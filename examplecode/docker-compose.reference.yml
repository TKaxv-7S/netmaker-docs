version: "3.4"

services:
  netmaker: # The Netmaker Server
    container_name: netmaker
    image: gravitl/netmaker:v0.14.2
    cap_add: # necessary permissions to manage networking
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    sysctls: # forwarding enablement for ipv4/ipv6
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
    restart: always
    volumes: # Volume mounts necessary to store SQL Data, and share data with CoreDNS and MQ (certs folder)
      - dnsconfig:/root/config/dnsconfig
      - sqldata:/root/data
      - shared_certs:/etc/netmaker
    environment:
      SERVER_NAME: "broker.NETMAKER_BASE_DOMAIN" # The resolvable domain of the MQ broker (must point to machine)
      SERVER_HOST: "SERVER_PUBLIC_IP" # the ip of the host machine
      SERVER_API_CONN_STRING: "api.NETMAKER_BASE_DOMAIN:443" # The string used by clients to connect to the api. Includes domain and port.
      COREDNS_ADDR: "SERVER_PUBLIC_IP" # the ip of coredns. Typically the same as SERVER_HOST
      DNS_MODE: "on" # allows netmaker to create a "hosts" file for CoreDNS and send dns records to clients
      SERVER_HTTP_HOST: "api.NETMAKER_BASE_DOMAIN" # The resolvable domain of the api
      API_PORT: "8081" # The port the API is running on
      CLIENT_MODE: "on" # Pretty much always leave this on
      MASTER_KEY: "REPLACE_MASTER_KEY" # The admin master key for accessing the API. Change this in any production installation.
      CORS_ALLOWED_ORIGIN: "*" # The "allowed origin" for API requests. Change to restrict where API requests can come from.
      DISPLAY_KEYS: "on" # Show keys permanently in UI (until deleted) as opposed to 1-time display.
      DATABASE: "sqlite" # The database Netmaker should configure itself for. If not SQLite, need to provide connection details (see above for env vars).
      NODE_ID: "netmaker-server-1" # The ID of the server to identify itself in HA setups and scenarios with multiple Netmaker servers.
      MQ_HOST: "mq" # The name of the MQ container
      MQ_PORT: "443" # The publicly reachable port of MQ
      HOST_NETWORK: "off"  # whether or not host networking is turned on. Only turn on if configured for host networking (see docker-compose.hostnetwork.yml). Will set host-level settings like iptables.
      VERBOSITY: "1" # Logging verbosity of the server. Can be 0-3
      MANAGE_IPTABLES: "on" # services for which to configure port forwarding on the machine. 'ssh' forwards port 22 over wireguard, enabling ssh to server over wireguard. dns enables private dns over wireguard.
      PORT_FORWARD_SERVICES: "dns" # set iptables on the machine being managed in order to forward properly from wireguard interface to services listed in "port forward services"
    ports:
      - "51821-51830:51821-51830/udp" # WireGuard ports - one per network you plan on running
    expose:
      - "8081" # API port
    labels: # traefik configuration
      - traefik.enable=true
      - traefik.http.routers.netmaker-api.entrypoints=websecure
      - traefik.http.routers.netmaker-api.rule=Host(`api.NETMAKER_BASE_DOMAIN`)
      - traefik.http.routers.netmaker-api.service=netmaker-api
      - traefik.http.services.netmaker-api.loadbalancer.server.port=8081
  netmaker-ui:
    container_name: netmaker-ui
    image: gravitl/netmaker-ui:v0.14.2
    depends_on:
      - netmaker
    links:
      - "netmaker:api"
    restart: always
    environment:
      BACKEND_URL: "https://api.NETMAKER_BASE_DOMAIN" # URL where UI will send API requests. Change based on SERVER_HOST, SERVER_HTTP_HOST, and API_PORT
    expose:
      - "80"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.nmui-security.headers.accessControlAllowOriginList=*.NETMAKER_BASE_DOMAIN
      - traefik.http.middlewares.nmui-security.headers.stsSeconds=31536000
      - traefik.http.middlewares.nmui-security.headers.browserXssFilter=true
      - traefik.http.middlewares.nmui-security.headers.customFrameOptionsValue=SAMEORIGIN
      - traefik.http.middlewares.nmui-security.headers.customResponseHeaders.X-Robots-Tag=none
      - traefik.http.middlewares.nmui-security.headers.customResponseHeaders.Server= # Remove the server name
      - traefik.http.routers.netmaker-ui.entrypoints=websecure
      - traefik.http.routers.netmaker-ui.middlewares=nmui-security@docker
      - traefik.http.routers.netmaker-ui.rule=Host(`dashboard.NETMAKER_BASE_DOMAIN`)
      - traefik.http.routers.netmaker-ui.service=netmaker-ui
      - traefik.http.services.netmaker-ui.loadbalancer.server.port=80
  coredns:
    container_name: coredns
    image: coredns/coredns
    command: -conf /root/dnsconfig/Corefile
    depends_on:
      - netmaker
    restart: always
    volumes:
      - dnsconfig:/root/dnsconfig
  traefik:
    image: traefik:v2.6
    container_name: traefik
    command: # embedded config for Traefik (alternative to mounting a YAML file)
      - "--certificatesresolvers.http.acme.email=YOUR_EMAIL"
      - "--certificatesresolvers.http.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.http.acme.tlschallenge=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=http"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--serverstransport.insecureskipverify=true"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    ports:
      - "443:443"
  mq: # the MQTT broker for netmaker
    container_name: mq
    image: eclipse-mosquitto:2.0.11-openssl
    depends_on:
      - netmaker
    restart: unless-stopped
    volumes:
      - /root/mosquitto.conf:/mosquitto/config/mosquitto.conf # need to pull conf file from github before running (under docker/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
      - shared_certs:/mosquitto/certs # certs generated by netmaker server, including root certificate and client certs for every peer.
    ports:
      - "127.0.0.1:1883:1883" # only exposed locally
    expose:
      - "8883"
    labels: # traefik configuration
      - traefik.enable=true
      - traefik.tcp.routers.mqtts.rule=HostSNI(`broker.NETMAKER_BASE_DOMAIN`)
      - traefik.tcp.routers.mqtts.tls.passthrough=true
      - traefik.tcp.services.mqtts-svc.loadbalancer.server.port=8883
      - traefik.tcp.routers.mqtts.service=mqtts-svc
      - traefik.tcp.routers.mqtts.entrypoints=websecure
volumes:
  traefik_certs: {} # certificates for traefik (generated by Traefik/LetsEncrypt)
  shared_certs: {} # certificates for MQ (generated by Netmaker)
  sqldata: {} # storage for embedded sqlite
  dnsconfig: {} # storage for coredns
  mosquitto_data: {} # storage for mqtt data
  mosquitto_logs: {} # storage for mqtt logs